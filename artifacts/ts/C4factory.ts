/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as C4factoryContractJson } from "../C4factory.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace C4factoryTypes {
  export type Fields = {
    templateId: HexString;
    totalGames: bigint;
  };

  export type State = ContractState<Fields>;

  export type NewGameCreatedEvent = ContractEvent<{
    gameNumber: bigint;
    gameID: HexString;
  }>;

  export interface CallMethodTable {
    createGame: {
      params: CallContractParams<{
        encodedImmFields: HexString;
        encodedMutFields: HexString;
      }>;
      result: CallContractResult<HexString>;
    };
    getGameId: {
      params: CallContractParams<{ gameNumber: bigint }>;
      result: CallContractResult<HexString>;
    };
    contractIdToAddress: {
      params: CallContractParams<{ contractId: HexString }>;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    createGame: {
      params: SignExecuteContractMethodParams<{
        encodedImmFields: HexString;
        encodedMutFields: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getGameId: {
      params: SignExecuteContractMethodParams<{ gameNumber: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    contractIdToAddress: {
      params: SignExecuteContractMethodParams<{ contractId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { games?: Map<bigint, HexString> };
}

class Factory extends ContractFactory<
  C4factoryInstance,
  C4factoryTypes.Fields
> {
  encodeFields(fields: C4factoryTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { NewGameCreated: 0 };

  at(address: string): C4factoryInstance {
    return new C4factoryInstance(address);
  }

  tests = {
    createGame: async (
      params: TestContractParams<
        C4factoryTypes.Fields,
        { encodedImmFields: HexString; encodedMutFields: HexString },
        C4factoryTypes.Maps
      >
    ): Promise<TestContractResult<HexString, C4factoryTypes.Maps>> => {
      return testMethod(this, "createGame", params, getContractByCodeHash);
    },
    getGameId: async (
      params: TestContractParams<
        C4factoryTypes.Fields,
        { gameNumber: bigint },
        C4factoryTypes.Maps
      >
    ): Promise<TestContractResult<HexString, C4factoryTypes.Maps>> => {
      return testMethod(this, "getGameId", params, getContractByCodeHash);
    },
    contractIdToAddress: async (
      params: TestContractParams<
        C4factoryTypes.Fields,
        { contractId: HexString },
        C4factoryTypes.Maps
      >
    ): Promise<TestContractResult<Address, C4factoryTypes.Maps>> => {
      return testMethod(
        this,
        "contractIdToAddress",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: C4factoryTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: C4factoryTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const C4factory = new Factory(
  Contract.fromJson(
    C4factoryContractJson,
    "=6-6+58=3+a4=1+89=11-1+f=84+7a7e0214696e73657274206174206d617020706174683a2000=128",
    "a11b80fb8f013fb4c3a6a85d9204c04c0d416d8eb1e4fb0fffac7a05eb827699",
    []
  )
);
registerContract(C4factory);

// Use this class to interact with the blockchain
export class C4factoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    games: new RalphMap<bigint, HexString>(
      C4factory.contract,
      this.contractId,
      "games"
    ),
  };

  async fetchState(): Promise<C4factoryTypes.State> {
    return fetchContractState(C4factory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNewGameCreatedEvent(
    options: EventSubscribeOptions<C4factoryTypes.NewGameCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      C4factory.contract,
      this,
      options,
      "NewGameCreated",
      fromCount
    );
  }

  view = {
    createGame: async (
      params: C4factoryTypes.CallMethodParams<"createGame">
    ): Promise<C4factoryTypes.CallMethodResult<"createGame">> => {
      return callMethod(
        C4factory,
        this,
        "createGame",
        params,
        getContractByCodeHash
      );
    },
    getGameId: async (
      params: C4factoryTypes.CallMethodParams<"getGameId">
    ): Promise<C4factoryTypes.CallMethodResult<"getGameId">> => {
      return callMethod(
        C4factory,
        this,
        "getGameId",
        params,
        getContractByCodeHash
      );
    },
    contractIdToAddress: async (
      params: C4factoryTypes.CallMethodParams<"contractIdToAddress">
    ): Promise<C4factoryTypes.CallMethodResult<"contractIdToAddress">> => {
      return callMethod(
        C4factory,
        this,
        "contractIdToAddress",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    createGame: async (
      params: C4factoryTypes.SignExecuteMethodParams<"createGame">
    ): Promise<C4factoryTypes.SignExecuteMethodResult<"createGame">> => {
      return signExecuteMethod(C4factory, this, "createGame", params);
    },
    getGameId: async (
      params: C4factoryTypes.SignExecuteMethodParams<"getGameId">
    ): Promise<C4factoryTypes.SignExecuteMethodResult<"getGameId">> => {
      return signExecuteMethod(C4factory, this, "getGameId", params);
    },
    contractIdToAddress: async (
      params: C4factoryTypes.SignExecuteMethodParams<"contractIdToAddress">
    ): Promise<
      C4factoryTypes.SignExecuteMethodResult<"contractIdToAddress">
    > => {
      return signExecuteMethod(C4factory, this, "contractIdToAddress", params);
    },
  };

  async multicall<Calls extends C4factoryTypes.MultiCallParams>(
    calls: Calls
  ): Promise<C4factoryTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends C4factoryTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<C4factoryTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | C4factoryTypes.MultiCallParams
      | C4factoryTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      C4factory,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
