/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as C4TemplateContractJson } from "../C4Template.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace C4TemplateTypes {
  export type Fields = {
    player1: Address;
    betAmount: bigint;
    player2: Address;
    winner: Address;
    isFinished: boolean;
  };

  export type State = ContractState<Fields>;

  export type GameJoinedEvent = ContractEvent<{ player: Address }>;
  export type GameResolvedEvent = ContractEvent<{ winner: Address }>;
  export type PrizeClaimedEvent = ContractEvent<{ winner: Address }>;

  export interface CallMethodTable {
    addBetAmount: {
      params: CallContractParams<{ caller: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    joinGame: {
      params: CallContractParams<{ caller: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    setWinner: {
      params: CallContractParams<{ caller: Address; declaredWinner: Address }>;
      result: CallContractResult<null>;
    };
    setDraw: {
      params: CallContractParams<{ caller: Address }>;
      result: CallContractResult<null>;
    };
    claimPrize: {
      params: CallContractParams<{ caller: Address }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    addBetAmount: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    joinGame: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    setWinner: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        declaredWinner: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    setDraw: {
      params: SignExecuteContractMethodParams<{ caller: Address }>;
      result: SignExecuteScriptTxResult;
    };
    claimPrize: {
      params: SignExecuteContractMethodParams<{ caller: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  C4TemplateInstance,
  C4TemplateTypes.Fields
> {
  encodeFields(fields: C4TemplateTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { GameJoined: 0, GameResolved: 1, PrizeClaimed: 2 };
  consts = {
    ErrorCodes: {
      GameAlreadyFinished: BigInt("1"),
      Player2AlreadyJoined: BigInt("2"),
      InsufficientBet: BigInt("3"),
      NotJoinedYet: BigInt("4"),
      InvalidWinner: BigInt("5"),
      AccessDenied: BigInt("6"),
      GameNotFinished: BigInt("7"),
    },
  };

  at(address: string): C4TemplateInstance {
    return new C4TemplateInstance(address);
  }

  tests = {
    addBetAmount: async (
      params: TestContractParamsWithoutMaps<
        C4TemplateTypes.Fields,
        { caller: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "addBetAmount", params, getContractByCodeHash);
    },
    joinGame: async (
      params: TestContractParamsWithoutMaps<
        C4TemplateTypes.Fields,
        { caller: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "joinGame", params, getContractByCodeHash);
    },
    setWinner: async (
      params: TestContractParamsWithoutMaps<
        C4TemplateTypes.Fields,
        { caller: Address; declaredWinner: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setWinner", params, getContractByCodeHash);
    },
    setDraw: async (
      params: TestContractParamsWithoutMaps<
        C4TemplateTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setDraw", params, getContractByCodeHash);
    },
    claimPrize: async (
      params: TestContractParamsWithoutMaps<
        C4TemplateTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "claimPrize", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: C4TemplateTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const C4Template = new Factory(
  Contract.fromJson(
    C4TemplateContractJson,
    "",
    "8bb77c630e806f3251c867cc75e9a38c02a47fce6d466610fb5093e1acc0db31",
    []
  )
);
registerContract(C4Template);

// Use this class to interact with the blockchain
export class C4TemplateInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<C4TemplateTypes.State> {
    return fetchContractState(C4Template, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeGameJoinedEvent(
    options: EventSubscribeOptions<C4TemplateTypes.GameJoinedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      C4Template.contract,
      this,
      options,
      "GameJoined",
      fromCount
    );
  }

  subscribeGameResolvedEvent(
    options: EventSubscribeOptions<C4TemplateTypes.GameResolvedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      C4Template.contract,
      this,
      options,
      "GameResolved",
      fromCount
    );
  }

  subscribePrizeClaimedEvent(
    options: EventSubscribeOptions<C4TemplateTypes.PrizeClaimedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      C4Template.contract,
      this,
      options,
      "PrizeClaimed",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | C4TemplateTypes.GameJoinedEvent
      | C4TemplateTypes.GameResolvedEvent
      | C4TemplateTypes.PrizeClaimedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      C4Template.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    addBetAmount: async (
      params: C4TemplateTypes.CallMethodParams<"addBetAmount">
    ): Promise<C4TemplateTypes.CallMethodResult<"addBetAmount">> => {
      return callMethod(
        C4Template,
        this,
        "addBetAmount",
        params,
        getContractByCodeHash
      );
    },
    joinGame: async (
      params: C4TemplateTypes.CallMethodParams<"joinGame">
    ): Promise<C4TemplateTypes.CallMethodResult<"joinGame">> => {
      return callMethod(
        C4Template,
        this,
        "joinGame",
        params,
        getContractByCodeHash
      );
    },
    setWinner: async (
      params: C4TemplateTypes.CallMethodParams<"setWinner">
    ): Promise<C4TemplateTypes.CallMethodResult<"setWinner">> => {
      return callMethod(
        C4Template,
        this,
        "setWinner",
        params,
        getContractByCodeHash
      );
    },
    setDraw: async (
      params: C4TemplateTypes.CallMethodParams<"setDraw">
    ): Promise<C4TemplateTypes.CallMethodResult<"setDraw">> => {
      return callMethod(
        C4Template,
        this,
        "setDraw",
        params,
        getContractByCodeHash
      );
    },
    claimPrize: async (
      params: C4TemplateTypes.CallMethodParams<"claimPrize">
    ): Promise<C4TemplateTypes.CallMethodResult<"claimPrize">> => {
      return callMethod(
        C4Template,
        this,
        "claimPrize",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    addBetAmount: async (
      params: C4TemplateTypes.SignExecuteMethodParams<"addBetAmount">
    ): Promise<C4TemplateTypes.SignExecuteMethodResult<"addBetAmount">> => {
      return signExecuteMethod(C4Template, this, "addBetAmount", params);
    },
    joinGame: async (
      params: C4TemplateTypes.SignExecuteMethodParams<"joinGame">
    ): Promise<C4TemplateTypes.SignExecuteMethodResult<"joinGame">> => {
      return signExecuteMethod(C4Template, this, "joinGame", params);
    },
    setWinner: async (
      params: C4TemplateTypes.SignExecuteMethodParams<"setWinner">
    ): Promise<C4TemplateTypes.SignExecuteMethodResult<"setWinner">> => {
      return signExecuteMethod(C4Template, this, "setWinner", params);
    },
    setDraw: async (
      params: C4TemplateTypes.SignExecuteMethodParams<"setDraw">
    ): Promise<C4TemplateTypes.SignExecuteMethodResult<"setDraw">> => {
      return signExecuteMethod(C4Template, this, "setDraw", params);
    },
    claimPrize: async (
      params: C4TemplateTypes.SignExecuteMethodParams<"claimPrize">
    ): Promise<C4TemplateTypes.SignExecuteMethodResult<"claimPrize">> => {
      return signExecuteMethod(C4Template, this, "claimPrize", params);
    },
  };
}
